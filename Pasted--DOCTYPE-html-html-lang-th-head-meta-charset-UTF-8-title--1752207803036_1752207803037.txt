<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <title>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</title>
  <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'IBM Plex Sans Thai', sans-serif;
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
      min-height: 100vh;
      color: white;
      padding: 2rem;
    }
    .container {
      max-width: 1000px;
      margin: 0 auto;
    }
    .header {
      text-align: center;
      margin-bottom: 3rem;
    }
    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #3b82f6, #8b5cf6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    .form-section {
      background: rgba(255, 255, 255, 0.08);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }
    .form-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }
    .form-group {
      display: flex;
      flex-direction: column;
    }
    label {
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: #e2e8f0;
    }
    input, select {
      padding: 0.8rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      font-size: 1rem;
    }
    input:focus, select:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    button {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);
    }
    .summary-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }
    .summary-card {
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
    }
    .summary-title {
      font-size: 0.9rem;
      color: #cbd5e1;
      margin-bottom: 0.5rem;
    }
    .summary-amount {
      font-size: 1.8rem;
      font-weight: 700;
    }
    .income { color: #10b981; }
    .expense { color: #ef4444; }
    .balance { color: #3b82f6; }
    .chart-container {
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }
    .transaction-list {
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      padding: 2rem;
    }
    .transaction-item {
      display: grid;
      grid-template-columns: 1fr 2fr 1fr 1fr 0.5fr;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      align-items: center;
    }
    .transaction-item:last-child {
      border-bottom: none;
    }
    .delete-btn {
      background: #ef4444;
      color: white;
      border: none;
      padding: 0.5rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
    }
    .nav-link {
      display: inline-block;
      color: white;
      text-decoration: none;
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.1);
      margin-top: 2rem;
      transition: all 0.3s ease;
    }
    .nav-link:hover {
      background: rgba(255, 255, 255, 0.2);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üí∞ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h1>
      <p>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</p>
    </div>

    <div class="form-section">
      <h3 style="margin-bottom: 1.5rem;">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</h3>
      <div class="form-row">
        <div class="form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
          <input type="date" id="date" required>
        </div>
        <div class="form-group">
          <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
          <select id="type" required>
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
            <option value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
            <option value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
          </select>
        </div>
        <div class="form-group">
          <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
          <input type="number" id="amount" required>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
          <input type="text" id="description" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤, ‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö" required>
        </div>
        <div class="form-group">
          <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
          <select id="category" required>
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
            <option value="sales">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡∏≤‡∏¢</option>
            <option value="other-income">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
            <option value="materials">‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</option>
            <option value="rent">‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤</option>
            <option value="utilities">‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ</option>
            <option value="marketing">‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î</option>
            <option value="transport">‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á</option>
            <option value="other-expense">‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
          </select>
        </div>
      </div>
      <button onclick="addTransaction()">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
    </div>

    <div class="summary-cards">
      <div class="summary-card">
        <div class="summary-title">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)</div>
        <div class="summary-amount income" id="totalIncome">0</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)</div>
        <div class="summary-amount expense" id="totalExpense">0</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</div>
        <div class="summary-amount balance" id="balance">0</div>
      </div>
    </div>

    <div class="chart-container">
      <h3 style="margin-bottom: 1rem;">‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
      <canvas id="monthlyChart" width="400" height="200"></canvas>
    </div>

    <div class="transaction-list">
      <h3 style="margin-bottom: 1rem;">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h3>
      <div class="transaction-item" style="font-weight: 600; background: rgba(255,255,255,0.1);">
        <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</div>
        <div>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</div>
        <div>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</div>
        <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</div>
        <div>‡∏•‡∏ö</div>
      </div>
      <div id="transactionList"></div>
    </div>

    <a href="index.html" class="nav-link">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a>
  </div>

  <script>
    let transactions = JSON.parse(localStorage.getItem('transactions') || '[]');
    let chart;

    function initDate() {
      document.getElementById('date').value = new Date().toISOString().split('T')[0];
    }

    function addTransaction() {
      const date = document.getElementById('date').value;
      const type = document.getElementById('type').value;
      const amount = parseFloat(document.getElementById('amount').value);
      const description = document.getElementById('description').value;
      const category = document.getElementById('category').value;

      if (!date || !type || !amount || !description || !category) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
      }

      const transaction = {
        id: Date.now(),
        date,
        type,
        amount,
        description,
        category
      };

      transactions.push(transaction);
      localStorage.setItem('transactions', JSON.stringify(transactions));

      document.getElementById('amount').value = '';
      document.getElementById('description').value = '';
      document.getElementById('type').value = '';
      document.getElementById('category').value = '';

      updateDisplay();
    }

    function deleteTransaction(id) {
      transactions = transactions.filter(t => t.id !== id);
      localStorage.setItem('transactions', JSON.stringify(transactions));
      updateDisplay();
    }

    function updateDisplay() {
      updateSummary();
      updateTransactionList();
      updateChart();
    }

    function updateSummary() {
      const currentMonth = new Date().toISOString().slice(0, 7);
      const monthlyTransactions = transactions.filter(t => t.date.startsWith(currentMonth));

      const totalIncome = monthlyTransactions
        .filter(t => t.type === 'income')
        .reduce((sum, t) => sum + t.amount, 0);

      const totalExpense = monthlyTransactions
        .filter(t => t.type === 'expense')
        .reduce((sum, t) => sum + t.amount, 0);

      const balance = totalIncome - totalExpense;

      document.getElementById('totalIncome').textContent = totalIncome.toLocaleString() + ' ‡∏ø';
      document.getElementById('totalExpense').textContent = totalExpense.toLocaleString() + ' ‡∏ø';
      document.getElementById('balance').textContent = balance.toLocaleString() + ' ‡∏ø';
    }

    function updateTransactionList() {
      const list = document.getElementById('transactionList');
      const sortedTransactions = transactions.sort((a, b) => new Date(b.date) - new Date(a.date));

      list.innerHTML = sortedTransactions.map(t => `
        <div class="transaction-item">
          <div>${new Date(t.date).toLocaleDateString('th-TH')}</div>
          <div>${t.description}</div>
          <div>${getCategoryName(t.category)}</div>
          <div class="${t.type}">${t.type === 'income' ? '+' : '-'}${t.amount.toLocaleString()} ‡∏ø</div>
          <div><button class="delete-btn" onclick="deleteTransaction(${t.id})">‡∏•‡∏ö</button></div>
        </div>
      `).join('');
    }

    function getCategoryName(category) {
      const names = {
        'sales': '‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        'other-income': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
        'materials': '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö',
        'rent': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤',
        'utilities': '‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ',
        'marketing': '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
        'transport': '‡∏Ç‡∏ô‡∏™‡πà‡∏á',
        'other-expense': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
      };
      return names[category] || category;
    }

    function updateChart() {
      const months = {};
      transactions.forEach(t => {
        const month = t.date.slice(0, 7);
        if (!months[month]) {
          months[month] = { income: 0, expense: 0 };
        }
        months[month][t.type] += t.amount;
      });

      const sortedMonths = Object.keys(months).sort();
      const labels = sortedMonths.map(m => {
        const [year, month] = m.split('-');
        return `${month}/${year.slice(2)}`;
      });

      const incomeData = sortedMonths.map(m => months[m].income);
      const expenseData = sortedMonths.map(m => months[m].expense);

      const ctx = document.getElementById('monthlyChart').getContext('2d');

      if (chart) {
        chart.destroy();
      }

      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö',
              data: incomeData,
              backgroundColor: 'rgba(16, 185, 129, 0.7)',
              borderColor: 'rgba(16, 185, 129, 1)',
              borderWidth: 1
            },
            {
              label: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢',
              data: expenseData,
              backgroundColor: 'rgba(239, 68, 68, 0.7)',
              borderColor: 'rgba(239, 68, 68, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                color: 'white',
                callback: function(value) {
                  return value.toLocaleString() + ' ‡∏ø';
                }
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            },
            x: {
              ticks: {
                color: 'white'
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            }
          },
          plugins: {
            legend: {
              labels: {
                color: 'white'
              }
            }
          }
        }
      });
    }

    initDate();
    updateDisplay();
  </script>
</body>
</html>
